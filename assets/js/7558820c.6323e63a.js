"use strict";(self.webpackChunkergogen_docs=self.webpackChunkergogen_docs||[]).push([[483],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=a,c=m["".concat(s,".").concat(h)]||m[h]||d[h]||o;return n?i.createElement(c,r(r({ref:t},u),{},{components:n})):i.createElement(c,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4515:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],l={sidebar_position:5},s="Outlines",p={unversionedId:"outlines",id:"outlines",isDocsHomePage:!1,title:"Outlines",description:"Once the raw points are available, we want to turn them into solid, continuous outlines.",source:"@site/docs/outlines.md",sourceDirName:".",slug:"/outlines",permalink:"/ergogen-docs/outlines",editUrl:"https://github.com/ergogen/ergogen-docs/edit/main/website/docs/outlines.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Points",permalink:"/ergogen-docs/points"},next:{title:"Cases",permalink:"/ergogen-docs/cases"}},u=[],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"outlines"},"Outlines"),(0,o.kt)("p",null,"Once the raw points are available, we want to turn them into solid, continuous outlines.\nThe points are enough to create properly positioned and rotated rectangles (with parametric side lengths), but they won't combine since there won't be any overlap.\nSo the first part of the outline generation is \"binding\", where we make the individual holes ",(0,o.kt)("em",{parentName:"p"},"bind")," to each other.\nWe use a key-level declarations for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"bind: num | [num_x, num_y] | [num_t, num_r, num_b, num_l] # default = 0\n")),(0,o.kt)("p",null,"Again, key-level declaration means that both of these should be specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"points")," section, benefiting from the same extension process every key-level setting does.\nThis field declares how much we want to bind in each direction, i.e., the amount of overlap we want to make sure that we can reach the neighbor (",(0,o.kt)("inlineCode",{parentName:"p"},"num")," applies to all directions, ",(0,o.kt)("inlineCode",{parentName:"p"},"num_x")," horizontally, ",(0,o.kt)("inlineCode",{parentName:"p"},"num_y")," vertically, and the t/r/b/l versions to top/right/bottom/left, respectively).\nNote that it might make sense to have negative ",(0,o.kt)("inlineCode",{parentName:"p"},"bind")," values, in case we not only don't want to bind in the given direction, but also don't want to \"cover up\" a potential corner rounding or bevel (see below)."),(0,o.kt)("p",null,'If it\'s a one-piece design, we also need to "glue" the halves together (or we might want to leave some extra space for the controller on the inner side for splits).\nThis is where the following section comes into play:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"glue:\n    glue_name:\n        top:\n            left: <anchor>\n            right: <anchor> | num\n        bottom:\n            left: <anchor>\n            right: <anchor> | num\n        waypoints:\n            - percent: num\n              width: num | [num_left, num_right]\n            - ...\n        extra:\n            - <primitive shape>\n            - ...\n    ...\n")),(0,o.kt)("p",null,"...where an ",(0,o.kt)("inlineCode",{parentName:"p"},"<anchor>")," is the same as it was for points."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"top")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bottom")," fields in each glue's section are both formatted the same, and describe the center line's top and bottom intersections, respectively.\nIn a one-piece case, this means that we project a line from a left-side anchor, another from the right, and converge them to where they meet.\nSplit designs can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"right"),' as a single number to mean the x coordinate where the side should be "cut off".'),(0,o.kt)("p",null,"This leads to a gluing middle patch that can be used to meld the left and right sides together, given by the counter-clockwise polygon:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Top intersection"),(0,o.kt)("li",{parentName:"ul"},"Left top point"),(0,o.kt)("li",{parentName:"ul"},"Left bottom point"),(0,o.kt)("li",{parentName:"ul"},"Bottom intersection"),(0,o.kt)("li",{parentName:"ul"},"Right bottom point"),(0,o.kt)("li",{parentName:"ul"},"Right top point")),(0,o.kt)("p",null,"If this is insufficient (maybe because it would leave holes), the ",(0,o.kt)("inlineCode",{parentName:"p"},"waypoints")," can be used to supplement the glue.\nHere, ",(0,o.kt)("inlineCode",{parentName:"p"},"percent")," means the y coordinate along the centerline (going from the top intersection to the bottom intersection), and ",(0,o.kt)("inlineCode",{parentName:"p"},"width")," means the offset on the x axis."),(0,o.kt)("p",null,"If this is somehow ",(0,o.kt)("em",{parentName:"p"},"still")," insufficient (or there were problems with the binding phase), we can specify additional primitive shapes under the ",(0,o.kt)("inlineCode",{parentName:"p"},"extra")," key (similarly to how we would use them in the exports; see below).\nThese are then added to what we have so far to finish out the glue.\n(TODO: while the ",(0,o.kt)("inlineCode",{parentName:"p"},"extra")," key is reserved for this purpose, it hasn't been needed, and therefore is unimplemented for now.)"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Once we're satisfied with the glue, the outline is generated by the union of the bound left/right halves and the glue polygon.\nNote that this outline is still parametric, so that we can specify different width/height values for the rectangles."),(0,o.kt)("p",null,'Now we can configure what we want to "export" as outlines from this phase, given by the combination/subtraction of the following primitives:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keys")," : the combined outline that we've just created. Its parameters include:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"side: left | right | middle | both | glue")," : the part we want to use",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"left")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"right")," are just the appropriate side of the laid out keys, without the glue."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"middle"),' means an "ideal" version of the glue (meaning that instead of the ',(0,o.kt)("inlineCode",{parentName:"li"},"outline.glue")," we defined above, we get ",(0,o.kt)("inlineCode",{parentName:"li"},"both")," - ",(0,o.kt)("inlineCode",{parentName:"li"},"left")," - ",(0,o.kt)("inlineCode",{parentName:"li"},"right"),", so the ",(0,o.kt)("em",{parentName:"li"},"exact")," middle piece we would have needed to glue everything together"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"both")," means both sides, held together by the glue"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"glue")," is just the raw glue shape we defined above under ",(0,o.kt)("inlineCode",{parentName:"li"},"outline.glue")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tag: <array of tags>")," : optional tags to filter which points to consider in this step, where tags can be specified as key-level attributes."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"glue: <glue_name>")," : the name of the glue to use, if applicable"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size: num | [num_x, num_y]")," : the width/height of the rectangles to lay onto the points. Note that these values are added to the evaluation context as the variables ",(0,o.kt)("inlineCode",{parentName:"li"},"sx")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"sy"),". So during a ",(0,o.kt)("inlineCode",{parentName:"li"},"keys")," layout with a size of 18, for example, a relative shift of ",(0,o.kt)("inlineCode",{parentName:"li"},"[.5 sx, .5 sy]")," actually means ",(0,o.kt)("inlineCode",{parentName:"li"},"[9, 9]")," in mms."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"corner: num # default = 0)")," : corner radius of the rectangles"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bevel: num # default = 0)")," : corner bevel of the rectangles, can be combined with rounding"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bound: boolean # default = true")," : whether to use the binding declared previously"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rectangle")," : an independent rectangle primitive. Parameters:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ref"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"rotate"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"shift"),", etc. (the usual anchor settings)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"corner")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"bevel"),", just like for ",(0,o.kt)("inlineCode",{parentName:"li"},"keys")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"circle")," : an independent circle primitive. Parameters:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ref"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"rotate"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"shift"),", etc. (the usual anchor settings)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"radius: num")," : the radius of the circle"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"polygon")," : an independent polygon primitive. Parameters:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"points: [<anchor>, ...]")," : the points of the polygon. Each ",(0,o.kt)("inlineCode",{parentName:"li"},"<anchor>")," can have its own ",(0,o.kt)("inlineCode",{parentName:"li"},"ref"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"shift"),", etc. (all of which are still the same as above). The only difference here is that if a ",(0,o.kt)("inlineCode",{parentName:"li"},"ref")," is unspecified, the previous point will be assumed (as in a continuous chain). For the first, it's ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 0]")," by default."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"outline")," : a previously defined outline, see below.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name: outline_name")," : the name of the referenced outline")))),(0,o.kt)("p",null,"Using these, we define exports as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"exports:\n    my_name:\n        - operation: add | subtract | intersect | stack # default = add\n          type: <one of the types> # default = outline\n          <type-specific params>\n        - ...\n")),(0,o.kt)("p",null,"Individual parts can also be specified as an object instead of an array (which could be useful when YAML or built-in inheritance is used), like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"exports:\n    my_name:\n        first_phase:\n            operation: add | subtract | intersect | stack # default = add\n            type: <one of the types> # default = outline\n            <type-specific params>\n        second:\n            ...\n")),(0,o.kt)("p",null,"Operations are performed in order, and the resulting shape is exported as an output.\nAdditionally, it is going to be available for further export declarations to use (through the ",(0,o.kt)("inlineCode",{parentName:"p"},"outline")," type) under the name specified (",(0,o.kt)("inlineCode",{parentName:"p"},"my_name"),", in this case).\nIf we only want to use it as a building block for further exports, we can start the name with an underscore (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"_my_name"),') to prevent it from being actually exported.\n(By convention, a starting underscore is kind of like a "private" marker.)'),(0,o.kt)("p",null,"A shorthand version of a part can be given when the elements of the above arrays/objects are simple strings instead of further objects.\nThe syntax is a symbol from ",(0,o.kt)("inlineCode",{parentName:"p"},"[+, -, ~, ^]"),", followed by a name, and is equivalent to adding/subtracting/intersecting/stacking an outline of that name, respectively.\nMore specifically, ",(0,o.kt)("inlineCode",{parentName:"p"},"~something")," is equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"type: outline\nname: something\noperation: intersect\n")))}m.isMDXComponent=!0}}]);