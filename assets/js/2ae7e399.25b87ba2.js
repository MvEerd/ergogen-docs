"use strict";(self.webpackChunkergogen_docs=self.webpackChunkergogen_docs||[]).push([[371],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,h=f["".concat(c,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4602:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return f}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:1},c="Config overview",l={unversionedId:"config-overview",id:"config-overview",isDocsHomePage:!1,title:"Config overview",description:"The whole Ergogen config is a single YAML file.",source:"@site/docs/config-overview.md",sourceDirName:".",slug:"/config-overview",permalink:"/config-overview",editUrl:"https://github.com/ergogen/ergogen-docs/edit/main/website/docs/config-overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/"},next:{title:"Preprocessing",permalink:"/preprocessing"}},p=[{value:"units",id:"units",children:[]},{value:"points",id:"points",children:[]},{value:"outlines",id:"outlines",children:[]},{value:"cases",id:"cases",children:[]},{value:"pcbs",id:"pcbs",children:[]}],u={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"config-overview"},"Config overview"),(0,i.kt)("p",null,"The whole Ergogen config is a single YAML file.\nIf you prefer JSON over YAML, feel free to use it, conversion is trivial and the generator will detect the input format.\nThe important thing is that the data can contain the following keys:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"points: <points config...> # required\nunits: <units config...> # optional\noutlines: <outline config...> #optional\ncases: <case config...> #optional\npcbs: <pcb config...> #optional\n")),(0,i.kt)("h3",{id:"units"},(0,i.kt)("a",{parentName:"h3",href:"units"},(0,i.kt)("inlineCode",{parentName:"a"},"units"))),(0,i.kt)("p",null,"Allows users to set additional units which can be used in the rest of your config"),(0,i.kt)("h3",{id:"points"},(0,i.kt)("a",{parentName:"h3",href:"points"},(0,i.kt)("inlineCode",{parentName:"a"},"points"))),(0,i.kt)("p",null,"Describes the core of the layout: the positions of the keys."),(0,i.kt)("h3",{id:"outlines"},(0,i.kt)("a",{parentName:"h3",href:"outlines"},(0,i.kt)("inlineCode",{parentName:"a"},"outlines"))),(0,i.kt)("p",null,"Uses the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"points")," to generate plate, case, and PCB outlines.  "),(0,i.kt)("h3",{id:"cases"},(0,i.kt)("a",{parentName:"h3",href:"cases"},(0,i.kt)("inlineCode",{parentName:"a"},"cases"))),(0,i.kt)("p",null,"Details how the case outlines are to be 3D-ized to form a 3D-printable object.  "),(0,i.kt)("h3",{id:"pcbs"},(0,i.kt)("a",{parentName:"h3",href:"pcbs"},(0,i.kt)("inlineCode",{parentName:"a"},"pcbs"))),(0,i.kt)("p",null,"Used to configure KiCAD PCB templates."),(0,i.kt)("hr",null),(0,i.kt)("p",null,"In the following sections we'll have an in-depth look into each of these.\nThere's also a completely separate ",(0,i.kt)("a",{parentName:"p",href:"/preprocessing"},"preprocessing"),' step to help reduce unnecessary repetition.\nOf course, if the declarative nature of the config is still not terse enough (despite the preprocessor, the built-in YAML references, and the Ergogen-based inheritance detailed below), there\'s nothing stopping you from writing code that generates the config.\nIt brings the game to yet another abstraction level higher, so that you can use branching, loops, and parametric functions to compose a "drier" keyboard definition.'))}f.isMDXComponent=!0}}]);