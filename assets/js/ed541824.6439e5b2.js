"use strict";(self.webpackChunkergogen_docs=self.webpackChunkergogen_docs||[]).push([[529],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:7},l="Cases",c={unversionedId:"cases",id:"cases",isDocsHomePage:!1,title:"Cases",description:"Overview",source:"@site/docs/cases.md",sourceDirName:".",slug:"/cases",permalink:"/cases",editUrl:"https://github.com/ergogen/ergogen-docs/edit/main/docs/cases.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Outlines",permalink:"/outlines"},next:{title:"PCBs",permalink:"/pcbs"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Examples",id:"examples",children:[]}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},d=u("Tabs"),m=u("TabItem"),f={toc:p};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cases"},"Cases"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"TODO -> outline to case illustration"),(0,r.kt)("p",null,'Cases add a pretty basic and minimal 3D aspect to the generation process.\nIn this phase, we take different outlines (defined in the previous section, even the "private" ones), extrude and position them in space, and combine them into one 3D-printable object.\nThat\'s it.\nDeclarations might look something like the following:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"cases:\n    case_name:\n        - what: outline # default option\n          name: <outline ref>\n          extrude: num # default = 1\n          shift: [x, y, z] # default = [0, 0, 0]\n          rotate: [ax, ay, az] # default = [0, 0, 0]\n          operation: add | subtract | intersect # default = add\n        - what: case\n          name: <case_ref>\n          # extrude makes no sense here...\n          shift: # same as above\n          rotate: # same as above\n          operation: # same as above\n        - ...\n    ...\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Individual case parts can be both arrays or objects, just like with outline parts previously.\nUse whichever is more convenient."))),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"what")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"outline"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," specifies which outline to import onto the xy plane, while ",(0,r.kt)("inlineCode",{parentName:"p"},"extrude")," specifies how much it should be extruded along the z axis.\nWhen the ",(0,r.kt)("inlineCode",{parentName:"p"},"what")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"case"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," specifies which previously defined case to use.\nAfter having established our base 3D object, it is (relatively!) ",(0,r.kt)("inlineCode",{parentName:"p"},"rotate"),"d, ",(0,r.kt)("inlineCode",{parentName:"p"},"shift"),"ed, and combined with what we have so far according to ",(0,r.kt)("inlineCode",{parentName:"p"},"operation"),'.\nIf we only want to use an object as a building block for further objects, we can employ the same "start with an underscore" trick we learned at the outlines section to make it "private".'),(0,r.kt)("p",null,"Individual case parts can again be listed as an object instead of an array, if that's more comfortable for inheritance/reuse (just like for outlines).\nAnd speaking of outline similarities, the ",(0,r.kt)("inlineCode",{parentName:"p"},"[+, -, ~]")," plus name shorthand is available again.\nFirst it will try to look up cases, and then outlines by the name given.\nStacking is omitted as it makes no sense here."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Simple Extrusion"),(0,r.kt)("p",null,(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(m,{value:"config",label:"Config",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},""))),(0,r.kt)(m,{value:"visualization",label:"Visualization",mdxType:"TabItem"},(0,r.kt)("div",{style:{textAlign:"center"}}))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Unibody Case"),(0,r.kt)("p",null,(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(m,{value:"config",label:"Config",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},""))),(0,r.kt)(m,{value:"visualization",label:"Visualization",mdxType:"TabItem"},(0,r.kt)("div",{style:{textAlign:"center"}}))))))}h.isMDXComponent=!0}}]);